snippet Dinic "dinic algo"
struct Dinic {
	struct Edge {
		int to, rev;
		int c, oc;
		int flow() { return max(oc - c, 0LL); } // if you need flows
	};

	vector<int> lvl, ptr, q;
	vector<vector<Edge>> adj;
	Dinic(int n) : lvl(n), ptr(n), q(n), adj(n) {}
	void addEdge(int a, int b, int c, int rcap = 0) {
		adj[a].push_back({b, (int)adj[b].size(), c, c});
		adj[b].push_back({a, (int)adj[a].size() - 1, rcap, rcap});
	}
	int dfs(int v, int t, int f) {
		if (v == t || !f)
			return f;
		for (int &i = ptr[v]; i < (int)adj[v].size(); i++) {
			Edge &e = adj[v][i];
			if (lvl[e.to] == lvl[v] + 1)
				if (int p = dfs(e.to, t, min(f, e.c))) {
					e.c -= p, adj[e.to][e.rev].c += p;
					return p;
				}
		}
		return 0;
	}
	int calc(int s, int t) {
		int flow = 0;
		q[0] = s;
		for (int L = 0; L < 31; ++L)
			do { // 'int L=30' maybe faster for random data
				lvl = ptr = vector<int>(q.size());
				int qi = 0, qe = lvl[s] = 1;
				while (qi < qe && !lvl[t]) {
					int v = q[qi++];
					for (Edge e : adj[v])
						if (!lvl[e.to] && e.c >> (30 - L))
							q[qe++] = e.to, lvl[e.to] = lvl[v] + 1;
				}
				while (int p = dfs(s, t, LLONG_MAX))
					flow += p;
			} while (lvl[t]);
		return flow;
	}
	bool leftOfMinCut(int a) { return lvl[a] != 0; }
};
endsnippet

snippet Hungarian "hungarian algorithm for min cost bipartite matching"
// https://github.com/nweeks1/UltiSnips
pair<ll, vector<int>> hungarian(const vector<vector<ll>> &cost)
{
	if (cost.empty()) return {0, {}};
	int n = SZ(cost) + 1, m = SZ(cost[0]) + 1;
	vector<ll> u(n), v(m);
	vector<int> p(m), ans(n-1);
	for (int i(1); i < n; ++i)
	{
		p[0] = i;
		int j0 = 0;
		vector<ll> dist(m, 1e18), pre(m, -1);
		vector<bool> done(m+1);
		do
		{
			done[j0] = true;
			ll i0 = p[j0], j1, delta = 1e18;
			for (int j(1); j < m; ++j) 
				if (!done[j])
				{
					auto cur = cost[i0-1][j-1] - u[i0] - v[j];
					if (cur < dist[j]) dist[j] = cur, pre[j] = j0;
					if (dist[j] < delta) delta = dist[j], j1 = j;
				}
			for (int j(0); j < m; ++j)
			{
				if (done[j]) u[p[j]] += delta, v[j] -= delta;
				else dist[j] -= delta;
			}
			j0 = j1;
		} while (p[j0]);
		while (j0)
		{
			int j1 = pre[j0];
			p[j0] = p[j1], j0 = j1;
		}
	}
	for (int j(1); j < m; ++j) 
		if (p[j])
			ans[p[j]-1] = j-1;
	return {-v[0], ans};
}
endsnippet

snippet MCMF
#include <bits/extc++.h>

using ll = long long;
const ll INF = numeric_limits<ll>::max() / 4;
typedef vector<ll> VL;

struct MCMF {
	int N;
	vector<vector<int>> ed, red;
	vector<VL> cap, flow, cost;
	vector<int> seen;
	VL dist, pi;
	vector<pair<int, int>> par;

	MCMF(int _N)
		: N(_N), ed(N), red(N), cap(N, VL(N)), flow(cap), cost(cap), seen(N),
		dist(N), pi(N), par(N) {}

	void addEdge(int from, int to, int capa, int costEd) {
		cap[from][to] = capa;
		;
		cost[from][to] = costEd;
		ed[from].push_back(to);
		red[to].push_back(from);
	}

	void path(int s) {
		fill(seen.begin(), seen.end(), 0);
		fill(dist.begin(), dist.end(), INF);
		dist[s] = 0;
		int di;
		__gnu_pbds::priority_queue<pair<int, int>> q;
		vector<decltype(q)::point_iterator> its(N);
		q.push({0, s});

		auto relax = [&](int i, int capa, int costEd, int dir) {
			int val = di - pi[i] + costEd;
			if (capa and val < dist[i]) {
				dist[i] = val;
				par[i] = {s, dir};
				if (its[i] == q.end())
					its[i] = q.push({-dist[i], i});
				else
					q.modify(its[i], {-dist[i], i});
			}
		};

		while (!q.empty()) {
			s = q.top().second;
			q.pop();
			seen[s] = 1;
			di = dist[s] + pi[s];
			for (int i : ed[s])
				if (!seen[i])
					relax(i, cap[s][i] - flow[s][i], cost[s][i], 1);
			for (int i : red[s])
				if (!seen[i])
					relax(i, flow[i][s], -cost[i][s], 0);
		}
		for (int i = 0; i < N; ++i)
			pi[i] = min(pi[i] + dist[i], INF);
	}

	pair<int, int> maxflow(int s, int t) {
		int totflow = 0, totcost = 0;
		while (path(s), seen[t]) {
			int fl = INF;
			for (int p, r, x = t; tie(p, r) = par[x], x != s; x = p)
				fl = min(fl, r ? cap[p][x] - flow[p][x] : flow[x][p]);
			totflow += fl;
			for (int p, r, x = t; tie(p, r) = par[x], x != s; x = p)
				if (r)
					flow[p][x] += fl;
				else
					flow[x][p] -= fl;
		}
		for (int i = 0; i < N; ++i)
			for (int j = 0; j < N; ++j)
				totcost += cost[i][j] * flow[i][j];
		return {totflow, totcost};
	}
};
endsnippet

snippet BipartiteMatch
/*
 * Bipartite matching in O(sqrt(V) * E).
 * g = neighbors of left partition
 * btoa = filled with -1, size of right partition
 * btoa[i] = vertex matched with i (i on the right), -1 if unmatched
 */

bool dfsMatching(int a, int L, vector<vector<int>> &g, vector<int> &btoa,
		vector<int> &A, vector<int> &B) {
	if (A[a] != L)
		return 0;
	A[a] = -1;
	for (int b : g[a])
		if (B[b] == L + 1) {
			B[b] = 0;
			if (btoa[b] == -1 or dfsMatching(btoa[b], L + 1, g, btoa, A, B))
				return btoa[b] = a, 1;
		}
	return 0;
}

int hopcroftKarp(vector<vector<int>> &g, vector<int> &btoa) {
	int res = 0;
	vector<int> A(g.size()), B(btoa.size()), cur, next;
	for (;;) {
		fill(A.begin(), A.end(), 0LL);
		fill(B.begin(), B.end(), 0LL);
		cur.clear();
		for (int a : btoa)
			if (a != -1)
				A[a] = -1;
		for (int a = 0; a < (int)g.size(); ++a)
			if (!A[a])
				cur.push_back(a);
		for (int lay = 1;; lay++) {
			bool isLast = 0;
			next.clear();
			for (int a : cur)
				for (int b : g[a]) {
					if (btoa[b] == -1) {
						B[b] = lay;
						isLast = 1;
					} else if (btoa[b] != a and !B[b]) {
						B[b] = lay;
						next.push_back(btoa[b]);
					}
				}
			if (isLast)
				break;
			if (next.empty())
				return res;
			for (int a : next)
				A[a] = lay;
			cur.swap(next);
		}
		for (int a = 0; a < (int)g.size(); ++a)
			res += dfsMatching(a, 0, g, btoa, A, B);
	}
}
endsnippet
