snippet Random
// https://github.com/nweeks1/UltiSnips
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int randint(int lb, int ub){ return uniform_int_distribution<int>(lb, ub)(rng); }
endsnippet

snippet Letrec
// https://github.com/nweeks1/UltiSnips
template<class Fun>
class y_combinator_result {
	Fun fun_;
	public:
	template<class T>
		explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}

	template<class ...Args>
		decltype(auto) operator()(Args &&...args) {
			return fun_(std::ref(*this), std::forward<Args>(args)...);
		}
};
template<class Fun>
decltype(auto) y_combinator(Fun &&fun) {
	return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));
}
endsnippet

snippet MatInv
// https://github.com/nweeks1/UltiSnips
int matInv(vector<vector<Mint>>& A)
{
	int n = SZ(A); 
	vector<int> col(n);
	vector<vector<Mint>> tmp(n, vector<Mint>(n));
	for (int i(0); i < n; ++i) tmp[i][i] = 1, col[i] = i;

	for (int i(0); i < n; ++i)
	{
		int r = i, c =i;
		for (int j(i); j < n; ++j) 
			for (int k(i); k < n; ++k)
				if (A[j][k] != 0)
				{
					r = j, c = k;
					goto found;
				}
		return i;
found:
		A[i].swap(A[r]); tmp[i].swap(tmp[r]);
		for (int j(0); j <n; ++j) 
			swap(A[j][i], A[j][c]), swap(tmp[j][i], tmp[j][c]);
		swap(col[i], col[c]);
		Mint v = A[i][i].inv();
		for (int j(i+1); j < n; ++j)
		{
			Mint f = A[j][i] * v;
			A[j][i] = 0;
			for (int k(i+1); k < n; ++k) A[j][k] -= f * A[i][k];
			for (int k(0); k < n; ++k) tmp[j][k] -= f * tmp[i][k];
		}
		for (int j(i+1); j < n; ++j)
			A[i][j] = A[i][j] * v;
		for (int j(0); j < n; ++j)
			tmp[i][j] *= v;
		A[i][i] = 1;
	}
	
	for (int i(n-1); i > 0; --i)
		for (int j(0); j < i; ++j)
		{
			Mint v = A[j][i];
			for (int k(0); k < n; ++k)
				tmp[j][k] -= v * tmp[i][k];
		}
	for (int i(0); i < n; ++i)
		for (int j(0); j < n; ++j)
			A[col[i]][col[j]] = tmp[i][j];
	return n;
}
endsnippet

snippet CartesianTree
// https://github.com/nweeks1/UltiSnips
// Elements must be distinct !
vector<int> calcCartesianTree(const vector<ll> &arr)
{
	int nbElem = SZ(arr);
	vector<int> par(nbElem);
	vector<int> stk(nbElem);
	int szStk(0);
	for (int i(0); i < nbElem; ++i)
	{
		if (!szStk or arr[stk[szStk-1]] < arr[i])
		{
			stk[szStk++] = i;
			continue;
		}
		while (szStk > 1 and arr[stk[szStk-2]] > arr[i])
		{
			par[stk[szStk-1]] = stk[szStk-2];
			szStk--;
		}
		if (arr[stk[szStk-1]] < arr[i])
			stk[szStk++] = i;
		else
		{
			par[stk[--szStk]] = i;
			stk[szStk++] = i;
		}
	}
	while (szStk > 1)
	{
		par[stk[szStk-1]] = stk[szStk-2];
		--szStk;
	}
	assert(szStk==1);
	par[stk[0]] = stk[0];
	return par;
}
endsnippet

snippet OrderedSet
// https://github.com/nweeks1/UltiSnips
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template<class T> using oset =tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update> ;
endsnippet

snippet Matrix
// https://github.com/nweeks1/UltiSnips
template<class T>
struct Matrix
{
	vector<vector<T>> mat;
	int nbLig, nbCol;

	Matrix(int lig, int col) : nbLig(lig), nbCol(col)
	{
		mat.resize(nbLig);
		for (auto &v : mat)
			v.resize(nbCol);
	}

	Matrix operator+(Matrix other) const
	{
		assert(other.nbLig == nbLig and other.nbCol == nbCol);
		Matrix ret(nbLig, nbCol);
		for (int i(0); i < nbLig; ++i)
			for (int j(0); j < nbCol; ++j)
				ret.mat[i][j] = mat[i][j] + other.mat[i][j];
		return ret;
	}

	Matrix operator*(Matrix other) const
	{
		assert(other.nbLig == nbCol);
		Matrix ret(nbLig, other.nbCol);
		for (int lig(0); lig < nbLig; ++lig)
			for (int col(0); col < other.nbCol; ++col)
				for (int k(0); k < nbCol; ++k)
					ret.mat[lig][col] += mat[lig][k] * other.mat[k][col];
		return ret;
	}

	Matrix fastpow(ll k)
	{
		assert(nbLig == nbCol);
		Matrix ret(nbLig, nbCol);
		Matrix cur(nbLig, nbCol);
		for (int i(0); i < nbLig; ++i)
		{
			for (int j(0); j < nbCol; ++j)
				cur.mat[i][j] = mat[i][j];
			ret.mat[i][i] = 1;
		}
		while (k)
		{
			if (k%2) ret = ret * cur;
			cur = cur *cur;
			k /= 2;
		}
		return ret;
	}
};
endsnippet
