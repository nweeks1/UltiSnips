snippet Random
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int randint(int lb, int ub){ return uniform_int_distribution<int>(lb, ub)(rng); }
endsnippet

snippet Letrec
template<class Fun>
class y_combinator_result {
	Fun fun_;
	public:
	template<class T>
		explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}

	template<class ...Args>
		decltype(auto) operator()(Args &&...args) {
			return fun_(std::ref(*this), std::forward<Args>(args)...);
		}
};
template<class Fun>
decltype(auto) y_combinator(Fun &&fun) {
	return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));
}
endsnippet

snippet MatInv
int matInv(vector<vector<Mint>>& A)
{
	int n = SZ(A); 
	vector<int> col(n);
	vector<vector<Mint>> tmp(n, vector<Mint>(n));
	for (int i(0); i < n; ++i) tmp[i][i] = 1, col[i] = i;

	for (int i(0); i < n; ++i)
	{
		int r = i, c =i;
		for (int j(i); j < n; ++j) 
			for (int k(i); k < n; ++k)
				if (A[j][k] != 0)
				{
					r = j, c = k;
					goto found;
				}
		return i;
found:
		A[i].swap(A[r]); tmp[i].swap(tmp[r]);
		for (int j(0); j <n; ++j) 
			swap(A[j][i], A[j][c]), swap(tmp[j][i], tmp[j][c]);
		swap(col[i], col[c]);
		Mint v = A[i][i].inv();
		for (int j(i+1); j < n; ++j)
		{
			Mint f = A[j][i] * v;
			A[j][i] = 0;
			for (int k(i+1); k < n; ++k) A[j][k] -= f * A[i][k];
			for (int k(0); k < n; ++k) tmp[j][k] -= f * tmp[i][k];
		}
		for (int j(i+1); j < n; ++j)
			A[i][j] = A[i][j] * v;
		for (int j(0); j < n; ++j)
			tmp[i][j] *= v;
		A[i][i] = 1;
	}

	for (int i(n-1); i > 0; --i)
		for (int j(0); j < i; ++j)
		{
			Mint v = A[j][i];
			for (int k(0); k < n; ++k)
				tmp[j][k] -= v * tmp[i][k];
		}
	for (int i(0); i < n; ++i)
		for (int j(0); j < n; ++j)
			A[col[i]][col[j]] = tmp[i][j];
	return n;
}
endsnippet

snippet CartesianTree
// https://github.com/nweeks1/UltiSnips
// Elements must be distinct !
vector<int> calcCartesianTree(const vector<ll> &arr)
{
	int nbElem = SZ(arr);
	vector<int> par(nbElem);
	vector<int> stk(nbElem);
	int szStk(0);
	for (int i(0); i < nbElem; ++i)
	{
		if (!szStk or arr[stk[szStk-1]] < arr[i])
		{
			stk[szStk++] = i;
			continue;
		}
		while (szStk > 1 and arr[stk[szStk-2]] > arr[i])
		{
			par[stk[szStk-1]] = stk[szStk-2];
			szStk--;
		}
		if (arr[stk[szStk-1]] < arr[i])
			stk[szStk++] = i;
		else
		{
			par[stk[--szStk]] = i;
			stk[szStk++] = i;
		}
	}
	while (szStk > 1)
	{
		par[stk[szStk-1]] = stk[szStk-2];
		--szStk;
	}
	assert(szStk==1);
	par[stk[0]] = stk[0];
	return par;
}
endsnippet

snippet OrderedSet
// https://github.com/nweeks1/UltiSnips
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template<class T> using oset =tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update> ;
endsnippet

snippet Matrix
// https://github.com/nweeks1/UltiSnips
template<class T>
struct Matrix
{
	vector<vector<T>> mat;
	int nbLig, nbCol;

	Matrix(int lig, int col) : nbLig(lig), nbCol(col)
	{
		mat.resize(nbLig);
		for (auto &v : mat)
			v.resize(nbCol);
	}

	Matrix operator+(Matrix other) const
	{
		assert(other.nbLig == nbLig and other.nbCol == nbCol);
		Matrix ret(nbLig, nbCol);
		for (int i(0); i < nbLig; ++i)
			for (int j(0); j < nbCol; ++j)
				ret.mat[i][j] = mat[i][j] + other.mat[i][j];
		return ret;
	}

	Matrix operator*(Matrix other) const
	{
		assert(other.nbLig == nbCol);
		Matrix ret(nbLig, other.nbCol);
		for (int lig(0); lig < nbLig; ++lig)
			for (int col(0); col < other.nbCol; ++col)
				for (int k(0); k < nbCol; ++k)
					ret.mat[lig][col] += mat[lig][k] * other.mat[k][col];
		return ret;
	}

	Matrix fastpow(ll k)
	{
		assert(nbLig == nbCol);
		Matrix ret(nbLig, nbCol);
		Matrix cur(nbLig, nbCol);
		for (int i(0); i < nbLig; ++i)
		{
			for (int j(0); j < nbCol; ++j)
				cur.mat[i][j] = mat[i][j];
			ret.mat[i][i] = 1;
		}
		while (k)
		{
			if (k%2) ret = ret * cur;
			cur = cur *cur;
			k /= 2;
		}
		return ret;
	}
};
endsnippet

snippet range "$1.begin(), $1.end() (beginend)" i
${1:vec}.begin(), $1.end()$0
endsnippet

snippet forr "for range loop"
for(auto ${2:v} : ${1:vec}) {
	${0:/* code */}
}
endsnippet

snippet for
for (int ${1:i} = ${2:0}; $1 < ${3:n}; ++$1) {
	$0
}
endsnippet

snippet readv "read vector"
for (auto &v : ${1:vec})
	cin >> v;
	$0
endsnippet

snippet Roman
	int romanToDec(string s) {
		map<char, int> value;
		value['I'] = 1;
		value['V'] = 5;
		value['X'] = 10;
		value['L'] = 50;
		value['C'] = 100;
		value['D'] = 500;
		value['M'] = 1000;

		int ret = 0;
		int len = s.size();
		vector<bool> removed(len);
		for (int i = 0; i + 1 < len; ++i) {
			if (value[s[i]] < value[s[i + 1]])
				ret -= value[s[i]], removed[i] = true;
		}
		for (int i = 0; i < len; ++i)
			if (!removed[i])
				ret += value[s[i]];
		return ret;
	}

string decToRoman(int x) {

	static vector<int> deltas = {1000, 900, 500, 400, 100, 90, 50,
		40,   10,  9,   5,   4,   1};
	static vector<string> patterns = {"M",  "CM", "D",  "CD", "C",  "XC", "L",
		"XL", "X",  "IX", "V",  "IV", "I"};

	assert(patterns.size() == deltas.size());
	string ret = "";
	int nbDeltas = deltas.size();
	for (int i = 0; i < nbDeltas; ++i) {
		while (x >= deltas[i])
			ret.append(patterns[i]), x -= deltas[i];
	}
	assert(!x);
	return ret;
}
endsnippet

snippet FastInput
inline char gc() { // like getchar()
	static char buf[1 << 16];
	static size_t bc, be;
	if (bc >= be) {
		buf[0] = 0, bc = 0;
		be = fread(buf, 1, sizeof(buf), stdin);
	}
	return buf[bc++]; // returns 0 on EOF
}

int readInt() {
	int a, c;
	while ((a = gc()) < 40);
	if (a == '-') return -readInt();
	while ((c = gc()) >= 48) a = a * 10 + c - 480;
	return a - 48;
}
endsnippet

snippet TernarySearch
// Minimize F over a, b given that f is bitonic. Replace > by <
template <class F> int ternSearch(int a, int b, F f) {
	assert(a <= b);
	while (b - a >= 5) {
		int mid = (a + b) / 2;
		if (f(mid) > f(mid + 1))
			a = mid;
		else
			b = mid + 1;
	}
	for (int i = a + 1; i < b + 1; ++i)
		if (f(a) > f(i))
			a = i;
	return a;
}
endsnippet

snippet Determinant
int det(vector<vector<int>> a) {
	int n = a.size();
	int ans = 1;
	for (int i = 0; i < n; ++i) {
		for (int j = i + 1; j < n; ++j)
			while (a[j][i] != 0) {
				int t = a[i][i] / a[j][i];
				if (t)
					for (int k = i; k < n; ++k)
						a[i][k] -= t * a[j][k];
				swap(a[i], a[j]);
				ans *= -1;
			}
		ans *= a[i][i];
		if (!ans)
			return 0;
	}
	return ans;
}
endsnippet
