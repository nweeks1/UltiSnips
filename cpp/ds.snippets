snippet Fenwick "range sum, point modification"
// https://github.com/nweeks1/UltiSnips
template<class T>
struct FenwickTree {
	vector<T> bit;  // binary indexed tree
	int n;

	FenwickTree(int N) {
		this->n = N;
		bit.assign(N, T(0));
	}

	FenwickTree(vector<T> a) : FenwickTree(a.size()) {
		for (size_t i = 0; i < a.size(); i++)
			add(i, a[i]);
	}

	T sum(T r) {
		T ret(0);
		for (; r >= 0; r = (r & (r + 1)) - 1)
			ret += bit[r];
		return ret;
	}

	T sum(int l, int r) {
		return sum(r) - sum(l - 1);
	}

	void add(int idx, T delta) {
		for (; idx < n; idx = idx | (idx + 1))
			bit[idx] += delta;
	}
};
endsnippet

snippet LazyAddMax "range add, range max"
// https://github.com/nweeks1/UltiSnips
struct LazyAddMax
{
	vector<ll> seg;
	vector<ll> updates;
	int nb_elem;
	ll UNDEF = -1e18;
	int p, deb;

	LazyAddMax() {}

	LazyAddMax(const vector<ll> &arr)
	{
		p=0;
		while ((1<<p) < SZ(arr)) ++p;
		deb = (1<<p)-1;
		nb_elem = (1<<p);
		seg.resize(4*nb_elem);
		updates.resize(4*nb_elem);
		for (int i(0); i < SZ(seg); ++i)
			seg[i] = UNDEF;	
		for (int i(0); i < SZ(arr); ++i)
			seg[deb + i] = arr[i];
		for (int i(deb-1); i >= 0; --i)
			seg[i] = max(seg[2*i+1], seg[2*i+2]);
	}

	void push(int node)
	{
		seg[node] += updates[node];
		if (2*node +1 < SZ(updates))
			updates[2*node+1] += updates[node];
		if (2*node + 2 < SZ(updates))
			updates[2*node+2] += updates[node];
		updates[node] = 0;
	}

	void __add(int node, int l, int r, int lo, int up, ll delta)
	{
		if (l > r) return ;
		push(node);
		if (l > up or r < lo)
			return ;
		if (lo <= l and up >= r)
		{
			updates[node] += delta;
			push(node);
			return ;
		}
		int mid = (l+r)/2;
		__add(2*node + 1, l, mid, lo,up, delta);
		__add(2*node+2, mid+1, r, lo,up,delta);
		seg[node] = max(seg[2*node+1], seg[2*node+2]);
		assert(!updates[node]);
	}

	void add(int lo, int up, ll delta)
	{
		__add(0,0, nb_elem-1, lo,up, delta);
	}

	ll __query(int node, int l, int r, int lo, int up)
	{
		push(node);
		if (l > up or r < lo)
			return UNDEF;
		if (l >= lo and r <= up)
			return seg[node];
		return max(__query(2*node+1, l, (l+r)/2, lo, up), __query(2*node+2, (l+r)/2+1, r, lo,up));
	}

	ll query(int lo, int up)
	{
		return __query(0, 0, nb_elem-1, lo,up);
	}
};
endsnippet

snippet MaxPoint "range max, point update"
// https://github.com/nweeks1/UltiSnips
struct rangeMax
{
	vector<ll> seg;
	int p, deb;

	rangeMax(int N)
	{
		while ((1<<p) < N) ++p;
		seg.resize((1<<(1+p)));
		deb = (1<<p)-1;
	}

	void update(int id, ll val)
	{
		id += deb;
		seg[id] = val;
		while (id)
		{
			id = (id-1)/2;
			seg[id] = max(seg[2*id+1], seg[2*id+2]);
		}
	}

	ll query(int l, int r)
	{
		ll ret(0);
		l += deb;
		r += deb;
		while (l < r)
		{
			if (l%2==0)
				ret = max(ret, seg[l]);
			if (r%2)
				ret = max(ret, seg[r]);
			l /= 2;
			r = (r-2)/2;
		}
		if (l == r)
			ret = max(ret, seg[r]);
		return ret;
	}
};
endsnippet

snippet BuildSeg "Basic build of segment tree"
// https://github.com/nweeks1/UltiSnips
void buildTree(int node, int l, int r)
{
	li[node] = l, ri[node] = r;

	if (l == r)
		return ;
	buildTree(2*node+1, l, (l+r)/2);
	buildTree(2*node+2, (l+r)/2+1, r);
}
endsnippet

snippet LinkCut "link cut tree"
// https://github.com/nweeks1/UltiSnips
struct SplayTree
{
	struct Node
	{
		int ch[2] = {0, 0}, p = 0;
		ll self = 0, path = 0;
		ll sub = 0, vir = 0;
		bool flip = 0;
	};
	vector<Node> T;

	SplayTree(int n) : T(n+1) {}

	void push(int x)
	{
		if (!x || !T[x].flip) return ;
		int l = T[x].ch[0], r = T[x].ch[1];

		T[l].flip ^= 1, T[r].flip ^= 1;
		swap(T[x].ch[0], T[x].ch[1]);
		T[x].flip= 0;
	}

	void pull(int x)
	{
		int l = T[x].ch[0], r = T[x].ch[1];
		push(l); push(r);
		T[x].path = T[l].path + T[x].self + T[r].path;
		T[x].sub = T[x].vir + T[l].sub + T[r].sub + T[x].self;
	}

	void set(int x, int d, int y)
	{
		T[x].ch[d] = y, T[y].p = x;
		pull(x);
	}
	
	void splay(int x)
	{
		auto dir = [&](int x)
		{
			int p = T[x].p; if (!p) return -1;
			return T[p].ch[0] == x ? 0 : T[p].ch[1] == x ? 1 : -1;
		};
		auto rotate = [&](int x)
		{
			int y = T[x].p, z = T[y].p, dx = dir(x), dy = dir(y);
			set(y, dx, T[x].ch[!dx]); 
			set(x, !dx, y);
			if (~dy) set(z, dy, x); 
      T[x].p = z;
		};
		for (push(x); ~dir(x);)
		{
			int y = T[x].p, z = T[y].p;
			push(z); push(y); push(x);
			int dx = dir(x), dy = dir(y);
			if (~dy) rotate(dx != dy ? x : y);
			rotate(x);
		}
	}
};

struct LinkCut : SplayTree
{
	LinkCut(int n) : SplayTree(n) {}

	int access(int x)
	{
		int u = x, v = 0;
		for (; u; v = u, u = T[u].p)
		{
			splay(u);
			int& ov = T[u].ch[1];
			T[u].vir += T[ov].sub;
			T[u].vir -= T[v].sub;
			ov = v;
			pull(u);
		}
		splay(x);
		return v;
	}

	void reroot(int x)
	{
		access(x); T[x].flip ^= 1; push(x);
	}

	void link(int u, int v)
	{	
		++u, ++v;
		reroot(u); access(v);
		T[v].vir += T[u].sub;
		T[u].p = v;
		pull(v);
	}

	void cut(int u, int v)
	{
		++u, ++v;
		reroot(u); access(v);
		T[v].ch[0] = T[u].p = 0; 
		pull(v);
	}

	int lca(int u, int v)
	{
		++u, ++v;
		if (u == v) return u;
		access(u); int ret = access(v);
		return T[u].p ? ret : 0;
	}

	ll subTree(int u, int v) // Calculates subtree aggregate for u when rooted at v
	{
		++u, ++v;
		reroot(v); access(u); 
		return T[u].vir + T[u].self;
	}

	ll path(int u, int v) // puts v at root, and path to u is in left child.
	{
		++u, ++v;
		reroot(u); access(v); return T[v].path;
	}

	void update(int u, ll v)
	{
		++u;
		access(u); T[u].self = v; 
		pull(u);
	}
};
endsnippet

snippet LiChao
// https://github.com/nweeks1/UltiSnips
using T = __int128; // To avoid overflow
struct Line
{
	ll a, b;
	Line(ll a, ll b) : a(a), b(b) {}
	Line() {}
  T get(ll x) { return a * T(x) + b;}
};

// Li chao tree
struct Node
{
	Node *l = 0, *r = 0;
	Line line; ll lo, hi;

	Node(Line l, ll lo, ll hi) : line(l), lo(lo), hi(hi) {}

	void add(Line addL){
  	if (addL.get(lo) > line.get(lo)) swap(line, addL);
    if (addL.get(hi) <= line.get(hi) or lo == hi) return;
		ll mid = lo + (hi - lo)/2;
		if (line.get(mid) > addL.get(mid))
		{
			if (!r) r = new Node(line, mid+1, hi);
			r->add(addL);
		}
		else
		{
			swap(line, addL);
			if (!l) l = new Node(line, lo, mid);
			l->add(addL);
		}
	}

	T get(ll x){
		if (lo == hi) return line.get(x);
		ll mid = lo + (hi - lo) / 2;
		if (mid >= x)
			return l ? max(line.get(x), l->get(x)) : line.get(x);
		return r ? max(line.get(x), r->get(x)) : line.get(x);
	}
};

struct LiChao
{
	ll lo, up; Node *root;

	LiChao(ll lo, ll up) : lo(lo), up(up), root(0) {}

	void add(Line line){
		if (!root) root = new Node(line, lo, up);
		else root->add(line);
	}

	ll get(ll x) { return ll(root->get(x));}
};
endsnippet
