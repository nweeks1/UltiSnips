snippet SuffixArray "Suffix Array function"
/*
 * sa[i] = starting index of i-th smallest suffix
 * sa.len() = n+ 1, sa[0] = n
 * lcp[i] = lcp(sa[i], sa[i-1]), lcp[0] = 0, len(sa) = n+1
 */

struct SuffixArray {
	vector<int> sa, lcp;
	SuffixArray(string &s, int lim = 256) {
		int n = s.size() + 1, k = 0, a, b;
		vector<int> x(s.begin(), s.end() + 1), y(n), ws(max(n, lim)), rank(n);
		sa = lcp = y, iota(sa.begin(), sa.end(), 0);

		for (int j = 0, p = 0; p < n; j = max(1, 2 * j), lim = p) {
			p = j, iota(y.begin(), y.end(), n - j);
			for (int i = 0; i < n; ++i)
				if (sa[i] >= j)
					y[p++] = sa[i] - j;
			fill(ws.begin(), ws.end(), 0);
			for (int i = 0; i < n; ++i)
				ws[x[i]]++;
			for (int i = 1; i < lim; ++i)
				ws[i] += ws[i - 1];
			for (int i = n; i--;)
				sa[--ws[x[y[i]]]] = y[i];
			swap(x, y);
			p = 1, x[sa[0]] = 0;
			for (int i = 1; i < n; ++i)
				a = sa[i - 1], b = sa[i],
				x[b] = (y[a] == y[b] and y[a + j] == y[b + j]) ? p - 1 : p++;
		}
		for (int i = 1; i < n; ++i)
			rank[sa[i]] = i;
		for (int i = 0, j; i < n - 1; lcp[rank[i++]] = k)
			for (k &&k--, j = sa[rank[i] - 1]; s[i + k] == s[j + k]; k++)
				;
	}
};
endsnippet

snippet Zfunction "builds z function"
vector<int> zFunction(const string &s)
{
	int len = s.size();

	vector<int> z(len);
	z[0] = len;
	int r(0), pos(0);
	for (int i(1); i < len;  ++i)
	{
		if (i < r)
			z[i] = min(z[i-pos], r-i);
		while (i + z[i] < len and s[i+z[i]] == s[z[i]])
			++z[i];
		if (i + z[i] > r)
			r = i+z[i], pos = i;
	}
	return z;
}
endsnippet

snippet Hash
using Mint1 = ModInt<int(1e9+7)>;
using Mint2 = ModInt<int(1e9+9)>;
using Mpair = pair<Mint1, Mint2>;
const int BASE = 1665525;
const int MAXLEN = 1e6;
Mpair powers[MAXLEN];
Mpair inverses[MAXLEN];

void preCalc(void)
{	
	for (int i(0); i < MAXLEN; ++i)
	{
		if (!i)
			powers[i] = inverses[i] = {1, 1};
		else
		{
			powers[i] = make_pair(powers[i-1].first * BASE, powers[i-1].second * BASE);
			inverses[i].first = powers[i].first.inv();
			inverses[i].second = powers[i].second.inv();
		}
	}
}
endsnippet

snippet Kmp
vector<int> prefixFun(const string &s)
{
	int len = SZ(s);
	vector<int> kmp(len);
	for (int i(1); i < len; ++i)
	{
		int j = kmp[i-1];
		while (j and s[i] != s[j])
			j = kmp[j-1];
		if (s[i] == s[j]) ++j;
		kmp[i] = j;
	}
	return kmp;
}
endsnippet

snippet SuffixTree
template<class T>
struct Node
{
	int l, r, par, link;
	ll characterDepth=0, countLeaves=0;
	ll subtreeSize=0;
	bool isLeaf;
	int minLeaf=1e9;
	map<T, int> next;

	Node (int l=0, int r = 0, int par = -1)
		: l(l), r(r), par(par), link(-1) {}

	int len(void) const {return r - l; }
	int &get(T c)
	{
		if (!next.count(c)) next[c] = -1;
		return next[c];
	}
};

struct State
{
	int v, pos;
	State (int v, int pos) : v(v), pos(pos) {}
};
template<class T>
struct SuffixTree
{
	T endMarker;
	vector<T> s;
	vector<Node<T>> tree;
	State ptr;
	int sz = 0;

	State trav(State curState, int l, int r)
	{
		while (l < r)
		{
			if (curState.pos == tree[curState.v].len())
			{
				curState = State(tree[curState.v].get(s[l]), 0);
				if (curState.v == -1)
					return curState;
			}
			else
			{
				if (s[tree[curState.v].l + curState.pos] != s[l])
					return State(-1, -1);
				if (r-l < tree[curState.v].len() - curState.pos)
					return State(curState.v, curState.pos + r-l);
				l += tree[curState.v].len() - curState.pos;
				curState.pos = tree[curState.v].len();
			}
		}
		return curState;
	}

	int split(State state)
	{
		if (state.pos == tree[state.v].len())
			return state.v;
		if (!state.pos)
			return tree[state.v].par;
		Node v = tree[state.v];
		int id = sz++;
		assert(SZ(tree) == id);
		tree.emplace_back(v.l, v.l + state.pos, v.par);
		tree[v.par].get(s[v.l]) = id;
		tree[id].get(s[v.l + state.pos]) = state.v;
		tree[state.v].par = id;
		tree[state.v].l += state.pos;
		return id;
	}

	int getLink(int v)
	{
		if (tree[v].link != -1) return tree[v].link;
		if (tree[v].par == -1) return 0;
		int to = getLink(tree[v].par);
		return tree[v].link = split(trav(State(to, tree[to].len()),
					tree[v].l + !tree[v].par, tree[v].r));
	}

	void extend(int pos)
	{
		while (1)
		{
			State nextPointer = trav(ptr, pos, pos+1);
			if (nextPointer.v != -1)
			{
				ptr = nextPointer;
				break;
			}
			int mid = split(ptr);
			int leaf = sz++;
			assert(SZ(tree) == leaf);
			tree.emplace_back(pos, SZ(s), mid);
			tree[mid].get(s[pos]) = leaf;
			ptr.v = getLink(mid);
			ptr.pos = tree[ptr.v].len();
			if (!mid)
				break;
		}
	}

	void preprocess(int u)
	{
		tree[u].isLeaf = tree[u].r == SZ(s);
		tree[u].countLeaves = tree[u].isLeaf;
		tree[u].characterDepth += tree[u].len();
		for (auto [c, v] : tree[u].next)
			if (v != -1)
			{
				assert(!tree[u].isLeaf);
				tree[v].characterDepth = tree[u].characterDepth;
				preprocess(v);
				tree[u].countLeaves += tree[v].countLeaves;
			}
	}

	SuffixTree(const vector<T> &S, const T endMarker)
		: endMarker(endMarker), s(S.begin(), S.end()), ptr(0, 0)
	{
		s.push_back(endMarker);
		tree.emplace_back();
		sz = 1;
		for (int i(0); i < SZ(s); ++i)
			extend(i);
		preprocess(0);
	}

	State _traverse(State state, int l, const vector<T> &text)
	{
		if (state.v == -1 or l == SZ(text))
			return state;
		if (state.pos == tree[state.v].len())
			return _traverse(State(tree[state.v].get(text[l]), 0), l, text);
		if (s[ tree[state.v].l + state.pos ] != text[l])
			return State(-1, -1);
		state.pos++;
		return _traverse(state, l+1, text);
	}

	State traverse(const vector<T> &text)
	{
		return _traverse(State(0, 0), 0, text);
	}

	vector<T> goUp(State u)
	{
		vector<T> ret;
		if (u.v)
		{
			int p = tree[u.v].par;
			ret = goUp(State(p, tree[p].len()));
		}

		for (int i(0); i < u.pos; ++i)
			ret.push_back(s[i + tree[u.v].l]);
		return ret;
	}
};
endsnippet

snippet PalindromicTree
struct PalindromicTree
{
	struct Node
	{
		array<int, 26> nxt;
		int suffLink;
		int len;
		int posStart;

		Node(int _posStart, int _len) : len(_len), posStart(_posStart)
		{
			fill(nxt.begin(), nxt.end(), -1); 
		}
	};

	vector<Node> nodes;

	int suffNode;
	string word;


	PalindromicTree()
	{
		word = "";
		nodes.emplace_back(0, -1);
		nodes.emplace_back(0, 0);
		nodes[0].suffLink = nodes[1].suffLink = 0;
		suffNode = 1;
	}

	void addLetter(char c)
	{
		word += c;
		int cur = suffNode;
		int curPos = SZ(word)-1;
		while (true)
		{
			int len = nodes[cur].len;
			if (curPos - len-1 >= 0 and word[curPos-len-1] == c)
				break;
			cur = nodes[cur].suffLink;
		}
		if (nodes[cur].nxt[c-'a'] != -1)
		{
			suffNode = nodes[cur].nxt[c-'a'];
			return ;
		}
		int lenPal = nodes[cur].len + 2;
		nodes.emplace_back( SZ(word)-lenPal, lenPal);
		nodes[cur].nxt[c-'a'] = SZ(nodes)-1;
		suffNode = SZ(nodes)-1;
		if (nodes.back().len == 1)
		{
			nodes.back().suffLink = 1;
			return ;
		}

		while (true)
		{
			cur = nodes[cur].suffLink;
			int len = nodes[cur].len;
			if (curPos - len - 1 >= 0 and word[curPos-len-1] == c)
			{
				nodes.back().suffLink = nodes[cur].nxt[c-'a'];
				break;
			}
		}
	}
};
endsnippet

snippet AhoCorasick
struct AhoCorasick {
	// TO CHANGE
	static const int ALPHABET_SIZE = 128, START = 0;
	struct Node {
		array<int, ALPHABET_SIZE> go;
		int back, start = -1, end = -1, nbMatchs = 0;

		Node() { go.fill(-1); }
	};
	vector<Node> nodes;
	vector<int> backup;
	vector<string> patterns;
	int nbFeuilles = 0;

	AhoCorasick() : nodes(1) {}

	void addString(const string &s) {
		patterns.push_back(s);
		assert(!s.empty());
		int curNode = 0;
		for (char d : s) {
			int c = d - START;
			if (nodes[curNode].go[c] == -1) {
				nodes[curNode].go[c] = nodes.size();
				nodes.emplace_back();
			}
			curNode = nodes[curNode].go[c];
		}
		if (nodes[curNode].end == -1)
			nodes[curNode].start = nbFeuilles;
		backup.push_back(nodes[curNode].end);
		nodes[curNode].end = nbFeuilles++;
		nodes[curNode].nbMatchs++;
	}

	void computeFailures() {
		nodes[0].back = nodes.size();
		nodes.emplace_back();
		nodes.back().go.fill(0);
		queue<int> q;
		q.push(0);
		while (!q.empty()) {
			int u = q.front();
			q.pop();
			int prev = nodes[u].back;
			for (int i = 0; i < ALPHABET_SIZE; ++i) {
				int &v = nodes[u].go[i];
				int goBack = nodes[prev].go[i];
				if (v == -1)
					v = goBack;
				else {
					nodes[v].back = goBack;
					if (nodes[v].end == -1)
						nodes[v].end = nodes[goBack].end;
					else
						backup[nodes[v].start] = nodes[goBack].end;
					nodes[v].nbMatchs += nodes[goBack].nbMatchs;
					q.push(v);
				}
			}
		}
	}
};
endsnippet
