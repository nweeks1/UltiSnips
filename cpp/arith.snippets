snippet Sieve "easy sieve"
// https://github.com/nweeks1/UltiSnips
const int LIM = 1e6;
bitset<LIM> isComposite;

vector<int> sieve()
{
	isComposite[0] = isComposite[1] = true;
	for (int p(2); p * p< LIM; ++p)
		if (!isComposite[p])
			for (int j(p * p); j < LIM; j += p)
				isComposite[j] = true;
	vector<int> primes;
	for (int i(2); i < LIM; ++i)
		if (!isComposite[i])
			primes.push_back(i);
	return primes;
}
endsnippet

snippet Fastpow "fastpow"
int fastpow(int a, int b) {
	int ret = 1;
	for (; b; b /= 2, a = a * a % MOD)
		if (b % 2)
			ret = ret * a % MOD;
	return ret;
}

int inv(int x) { return fastpow(x, MOD - 2); }
endsnippet

snippet ContFraction "continued fractions for sqrt"
// https://github.com/nweeks1/UltiSnips
// Puts next term inside continuedFractions, then returns next tuple
// used to calculate continued fraction of (sqrt(a) + b)/c
vector<ll> continuedFractions;
tuple<ll, ll, ll> calcNext(tuple<ll, ll, ll> x)
{
	auto [a, b, c] = x;
	ll lo(0), up(1e9);
	long double val = (sqrt(a) + b) / c;
	while (lo < up)
	{
		ll mid = (lo + up+1)/2;
		if (mid <= val) lo = mid;
		else up = mid-1;
	}
	ll n = lo;
	continuedFractions.push_back(n);
	ll u = c;
	ll v = a - (b - n * c) * (b - n * c);
	ll d = gcd(u, v);
	u /= d;
	v /= d;
	return make_tuple(u * u * a, u * (n * c - b), v);
}
endsnippet

snippet Fractions "fraction class"
// https://github.com/nweeks1/UltiSnips
struct Rational
{
	ll p, q;

	Rational()  : p(0), q(1) {}
	Rational(ll _p, ll _q) : p(_p), q(_q) {ll d = gcd(p, q); p /= d, q /= d;}

	Rational operator+(Rational other) const
	{
		return Rational(p * other.q + other.p * q, other.q * q);
	}

	Rational operator-(Rational other) const
	{
		return Rational(p * other.q - q * other.p, other.q * q);
	}

	Rational operator*(Rational other) const
	{
		return Rational(p * other.p, q * other.q);	
	}

	Rational operator/(Rational other) const
	{
		return Rational(p * other.q, q * other.p);
	}
};
endsnippet

snippet Matrix "basic matrix class"
// https://github.com/nweeks1/UltiSnips
template<typename T>
struct Matrix
{
	int nbLig, nbCol;
	vector<vector<T>> mat;

	Matrix(int lig, int col) : nbLig(lig), nbCol(col)
	{
		mat.resize(nbLig);
		for (auto &v : mat) v.resize(nbCol);
	}

	Matrix operator*(Matrix other) const
	{
		assert(nbCol == other.nbLig);
		Matrix ret(nbLig, other.nbCol);
		for (int i(0); i < nbLig; ++i)
			for (int j(0); j < other.nbCol; ++j)
				for (int k(0); k < nbCol; ++k)
					ret.mat[i][j] += mat[i][k] * other.mat[k][j];
		return ret;
	}

	Matrix operator+(Matrix other) const
	{
		assert(nbLig == other.nbLig and nbCol == other.nbCol);
		Matrix ret(nbLig, nbCol);
		for (int i(0); i < nbLig; ++i)
			for (int j(0); j < nbCol; ++j)
				ret.mat[i][j] = mat[i][j] + other.mat[i][j];
		return ret;
	}

	Matrix fastpow(ll p) const
	{
		Matrix ret(nbLig, nbCol);
		if (!p)
		{
			for (int i(0); i < nbLig; ++i)
				ret.mat[i][i] = 1;
			return ret;
		}
		ret = fastpow(p/2);
		ret = ret * ret;
		if (p%2) ret = ret * (*this);
		return ret;
	}
};
endsnippet

snippet Factor
// https://github.com/nweeks1/UltiSnips
using ull = unsigned long long;
ull modmul(ull a, ull b, ull M) {
	int ret = a * b - M * ull(1.L / M * a * b);
	return ret + M * (ret < 0) - M * (ret >= (int)M);
}
ull modpow(ull b, ull e, ull mod) {
	ull ans = 1;
	for (; e; b = modmul(b, b, mod), e /= 2)
		if (e & 1) ans = modmul(ans, b, mod);
	return ans;
}

bool isPrime(ull n)
{
	if (n < 2 or n % 6 % 4 != 1) return (n | 1) == 3;
	ull A[] = {2, 325, 9375, 28178, 450775, 9780504, 1795265022};
	ull s = __builtin_ctzll(n-1), d = n >> s;
	for (ull a : A)
	{
		ull p = modpow(a%n, d, n), i = s;
		while (p != 1 and p != n-1 and a % n and i--)
			p = modmul(p, p, n);
		if (p != n-1 and i != s) return 0;
	}
	return 1;
}


ull pollard(ull n)
{
	auto f = [n](ull x) {return modmul(x, x, n) + 1; };
	ull x = 0, y(0), t(30), prd(2), i(1), q;
	while (t++%40 or __gcd(prd, n) == 1)
	{

		if (x == y) x = ++i, y = f(x);
		if ((q = modmul(prd, max(x,y)- min(x,y), n))) prd = q;
		x = f(x), y = f(f(y));
	}
	return __gcd(prd, n);
}

vector<ull> factor(ull n)
{
	if (n == 1) return {};
	if (isPrime(n)) return {n};
	int x = pollard(n);
	auto l = factor(x), r = factor(n/x);
	l.insert(l.end(), r.begin(), r.end());
	return l;
}
endsnippet

snippet PrimitiveRoot
// https://github.com/nweeks1/UltiSnips
constexpr int primitive_root(int m)
{
	if (m == 2) return 1;
	if (m == 167772161) return 3;
	if (m == 469762049) return 3;
	if (m == 754974721) return 11;
	if (m == 998244353) return 3;
	int divs[20] = {};
	divs[0] = 2;
	int cnt = 1;
	int x = (m - 1) / 2;
	while (x % 2 == 0) x /= 2;
	for (int i = 3; (int)(i)*i <= x; i += 2)
	{
		if (x % i == 0) 
		{
			divs[cnt++] = i;
			while (x % i == 0) 
				x /= i;
		}
	}
	if (x > 1) 
		divs[cnt++] = x;
	for (int g = 2;; g++) {
		bool ok = true;
		for (int i = 0; i < cnt; i++)
			if (fastpow(g, (m - 1) / divs[i], m) == 1) {
				ok = false;
				break;
			}
		if (ok) return g;
	}
	assert(false);
	return -1;
}
endsnippet
